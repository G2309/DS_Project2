{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":36363,"databundleVersionId":4050810,"sourceType":"competition"}],"dockerImageVersionId":31154,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport random\nimport numpy as np\nimport pandas as pd\nimport json\nfrom PIL import Image\nimport pydicom\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, datasets\nimport torch.nn.functional as F\nfrom torch.cuda.amp import autocast, GradScaler\nimport timm\nfrom tqdm import tqdm\nimport math\nimport SimpleITK as sitk","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T14:18:47.663813Z","iopub.execute_input":"2025-10-23T14:18:47.664104Z","iopub.status.idle":"2025-10-23T14:18:47.669238Z","shell.execute_reply.started":"2025-10-23T14:18:47.664081Z","shell.execute_reply":"2025-10-23T14:18:47.668419Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"DATA_PATH = \"/kaggle/input/rsna-2022-cervical-spine-fracture-detection\"\ntrain_df = pd.read_csv(os.path.join(DATA_PATH, \"train.csv\"))\ntest_df = pd.read_csv(os.path.join(DATA_PATH, \"test.csv\"))\nsample_sub = pd.read_csv(os.path.join(DATA_PATH, \"sample_submission.csv\"))\nTRAIN_IMG_DIR = os.path.join(DATA_PATH, \"train_images\")\n\nstudy_ids = train_df[\"StudyInstanceUID\"].unique()\nnp.random.seed(33)\nnp.random.shuffle(study_ids)\nsplit_idx = int(len(study_ids) * 0.8)\ntrain_studies = study_ids[:split_idx]\nval_studies = study_ids[split_idx:]\ntrain_df_split = train_df[train_df[\"StudyInstanceUID\"].isin(train_studies)]\nval_df_split = train_df[train_df[\"StudyInstanceUID\"].isin(val_studies)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T14:18:49.738229Z","iopub.execute_input":"2025-10-23T14:18:49.738487Z","iopub.status.idle":"2025-10-23T14:18:49.788151Z","shell.execute_reply.started":"2025-10-23T14:18:49.738468Z","shell.execute_reply":"2025-10-23T14:18:49.787618Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"class CervicalSliceDataset(Dataset):\n    def __init__(self, df, root, transform=None, num_slices=5):\n        self.df = df\n        self.root = root\n        self.transform = transform\n        self.num_slices = num_slices\n        self.study_ids = df[\"StudyInstanceUID\"].unique().tolist()\n    \n    def __len__(self):\n        return len(self.study_ids)\n    \n    def __getitem__(self, idx):\n        study = self.study_ids[idx]\n        folder = os.path.join(self.root, study)\n        files = sorted([f for f in os.listdir(folder) if f.endswith(\".dcm\")])\n        \n        if len(files) == 0:\n            raise RuntimeError(f\"No DICOM in {folder}\")\n        \n        indices = np.linspace(0, len(files)-1, self.num_slices, dtype=int)\n        slices = []\n        \n        for i in indices:\n            path = os.path.join(folder, files[i])\n            ds = pydicom.dcmread(path)\n            try:\n                img = sitk.ReadImage(path)\n                arr = sitk.GetArrayFromImage(img)[0]\n            except Exception as e:\n                print(f\"⚠️ Error leyendo {path}: {e}\")\n                arr = np.zeros((512,512), dtype=np.float32)\n            \n            if arr.ndim == 3:\n                arr = arr[0]\n            \n            img = Image.fromarray(arr).convert(\"L\")\n            if self.transform:\n                img = self.transform(img)\n            slices.append(img)\n        \n        img_tensor = torch.mean(torch.stack(slices), dim=0)\n        \n        row = self.df[self.df[\"StudyInstanceUID\"]==study].iloc[0]\n        label = torch.tensor([row[\"patient_overall\"]], dtype=torch.float32)\n        \"\"\"\n        for i in range(1,8):\n            labels[i] = row[f\"C{i}\"]\n        \"\"\"\n        return img_tensor, label\n\n\n\nclass CNN(nn.Module):\n    def __init__(self, num_classes=8):\n        super(CNN, self).__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(128),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2, 2)\n        )\n\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(128 * 28 * 28, 256),\n            nn.ReLU(inplace=True),\n            nn.Dropout(0.3),\n            nn.Linear(256, num_classes)\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T14:19:03.060882Z","iopub.execute_input":"2025-10-23T14:19:03.061432Z","iopub.status.idle":"2025-10-23T14:19:03.072088Z","shell.execute_reply.started":"2025-10-23T14:19:03.061410Z","shell.execute_reply":"2025-10-23T14:19:03.071409Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"\ntrain_transforms = transforms.Compose([\n    transforms.Resize((224,224)),\n    transforms.RandomRotation(15),\n    transforms.RandomHorizontalFlip(0.3),\n    transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),\n    transforms.ColorJitter(brightness=0.2, contrast=0.2),\n    transforms.Grayscale(num_output_channels=3),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485,0.456,0.406], std=[0.229,0.224,0.225])\n])\n\nval_transforms = transforms.Compose([\n    transforms.Resize((224,224)),\n    transforms.Grayscale(num_output_channels=3),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485,0.456,0.406], std=[0.229,0.224,0.225])\n])\n\ntrain_ds = CervicalSliceDataset(train_df_split, TRAIN_IMG_DIR, transform=train_transforms, num_slices=5)\nval_ds = CervicalSliceDataset(val_df_split, TRAIN_IMG_DIR, transform=val_transforms, num_slices=5)\n\ntrain_loader = DataLoader(train_ds, batch_size=16, shuffle=True, num_workers=0, pin_memory=False)\nval_loader = DataLoader(val_ds, batch_size=16, shuffle=False, num_workers=0, pin_memory=False)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Usando:\", device)\n\nmodel = CNN(num_classes=8).to(device)\ncriterion = nn.BCEWithLogitsLoss()   # Multi-etiqueta: C1–C7 + overall\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-4)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T14:19:11.849211Z","iopub.execute_input":"2025-10-23T14:19:11.849722Z","iopub.status.idle":"2025-10-23T14:19:12.375182Z","shell.execute_reply.started":"2025-10-23T14:19:11.849696Z","shell.execute_reply":"2025-10-23T14:19:12.374394Z"}},"outputs":[{"name":"stdout","text":"Usando: cuda\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"model = CNN(num_classes=1).to(device)\ncriterion = nn.BCEWithLogitsLoss()  \noptimizer = torch.optim.Adam(model.parameters(), lr=1e-4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T14:19:25.320841Z","iopub.execute_input":"2025-10-23T14:19:25.321421Z","iopub.status.idle":"2025-10-23T14:19:25.570210Z","shell.execute_reply.started":"2025-10-23T14:19:25.321402Z","shell.execute_reply":"2025-10-23T14:19:25.569613Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"from torch.nn import functional as F\n\ndef train_one_epoch(model, train_loader, optimizer, criterion, device):\n    model.train()\n    running_loss = 0.0\n\n    for imgs, labels in train_loader:\n        # Asegura shape [B,1]\n        if labels.ndim == 1:\n            labels = labels.view(-1, 1)\n\n        imgs  = imgs.to(device, non_blocking=True)\n        labels = labels.to(device, non_blocking=True)\n\n        optimizer.zero_grad(set_to_none=True)\n        logits = model(imgs)                 # [B,1]\n        loss   = criterion(logits, labels)   # BCEWithLogitsLoss\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n\n    return running_loss / len(train_loader)\n\n\n@torch.no_grad()\ndef evaluate(model, val_loader, criterion, device, threshold=0.5):\n    model.eval()\n    running_loss = 0.0\n    acc_batches = 0.0\n    n_batches = 0\n\n    for imgs, labels in val_loader:\n        if labels.ndim == 1:\n            labels = labels.view(-1, 1)\n\n        imgs   = imgs.to(device, non_blocking=True)\n        labels = labels.to(device, non_blocking=True)\n\n        logits = model(imgs)                  # [B,1]\n        loss   = criterion(logits, labels)\n        running_loss += loss.item()\n\n        # accuracy binaria por batch\n        probs = torch.sigmoid(logits)         # [B,1]\n        preds = (probs > threshold).float()   # [B,1]\n        acc   = (preds == (labels > 0.5)).float().mean().item()\n        acc_batches += acc\n        n_batches   += 1\n\n    val_loss = running_loss / len(val_loader)\n    val_acc  = acc_batches / max(1, n_batches)\n    return val_loss, val_acc\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T15:18:22.124555Z","iopub.execute_input":"2025-10-23T15:18:22.125124Z","iopub.status.idle":"2025-10-23T15:18:22.132796Z","shell.execute_reply.started":"2025-10-23T15:18:22.125099Z","shell.execute_reply":"2025-10-23T15:18:22.132110Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"train_losses, val_losses, val_accuracies = [], [], []\n\nnum_epochs = 10\nfor epoch in range(num_epochs):\n    tr_loss = train_one_epoch(model, train_loader, optimizer, criterion, device)\n    va_loss, va_acc = evaluate(model, val_loader, criterion, device, threshold=0.5)\n\n    train_losses.append(tr_loss)\n    val_losses.append(va_loss)\n    val_accuracies.append(va_acc)\n\n    print(f\"Epoch {epoch+1:02d} | \"\n          f\"Train loss: {tr_loss:.4f} | \"\n          f\"Val loss: {va_loss:.4f} | \"\n          f\"Val acc: {va_acc:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T15:18:34.851921Z","iopub.execute_input":"2025-10-23T15:18:34.852599Z","iopub.status.idle":"2025-10-23T15:43:28.690691Z","shell.execute_reply.started":"2025-10-23T15:18:34.852577Z","shell.execute_reply":"2025-10-23T15:43:28.689876Z"}},"outputs":[{"name":"stdout","text":"Epoch 01 | Train loss: 0.6940 | Val loss: 0.6926 | Val acc: 0.4904\nEpoch 02 | Train loss: 0.6924 | Val loss: 0.6948 | Val acc: 0.5240\nEpoch 03 | Train loss: 0.6847 | Val loss: 0.7236 | Val acc: 0.5000\nEpoch 04 | Train loss: 0.6885 | Val loss: 0.6940 | Val acc: 0.5288\nEpoch 05 | Train loss: 0.6895 | Val loss: 0.6950 | Val acc: 0.5144\nEpoch 06 | Train loss: 0.6886 | Val loss: 0.6931 | Val acc: 0.4976\nEpoch 07 | Train loss: 0.6868 | Val loss: 0.6941 | Val acc: 0.5264\nEpoch 08 | Train loss: 0.6867 | Val loss: 0.7012 | Val acc: 0.5433\nEpoch 09 | Train loss: 0.6955 | Val loss: 0.6930 | Val acc: 0.5096\nEpoch 10 | Train loss: 0.6877 | Val loss: 0.6924 | Val acc: 0.5361\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"from sklearn.metrics import classification_report, roc_auc_score, roc_curve, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n@torch.no_grad()\ndef evaluate_full(model, loader, device, threshold=0.5):\n    model.eval()\n    all_labels, all_probs = [], []\n\n    for imgs, labels in loader:\n        if labels.ndim == 1:\n            labels = labels.view(-1, 1)\n        imgs = imgs.to(device)\n        labels = labels.to(device)\n\n        logits = model(imgs)\n        probs = torch.sigmoid(logits).cpu().numpy().ravel()\n        labels = labels.cpu().numpy().ravel()\n\n        all_probs.extend(probs)\n        all_labels.extend(labels)\n\n    all_probs = np.array(all_probs)\n    all_labels = np.array(all_labels)\n\n    preds = (all_probs > threshold).astype(int)\n\n    # 🧮 métricas globales\n    acc  = (preds == all_labels).mean()\n    auc  = roc_auc_score(all_labels, all_probs)\n    print(f\"Accuracy: {acc:.3f} | AUC: {auc:.3f}\")\n    print(classification_report(all_labels, preds, digits=3))\n\n    # 🧾 Matriz de confusión\n    cm = confusion_matrix(all_labels, preds)\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=[\"No Fx\", \"Fx\"], yticklabels=[\"No Fx\", \"Fx\"])\n    plt.xlabel(\"Predicho\")\n    plt.ylabel(\"Real\")\n    plt.title(\"Matriz de confusión\")\n    plt.show()\n\n    # 📈 Curva ROC\n    fpr, tpr, _ = roc_curve(all_labels, all_probs)\n    plt.plot(fpr, tpr, label=f\"AUC={auc:.3f}\")\n    plt.plot([0,1], [0,1], '--', color='gray')\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate\")\n    plt.title(\"Curva ROC\")\n    plt.legend()\n    plt.show()\n\n    return acc, auc\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T15:44:13.631413Z","iopub.execute_input":"2025-10-23T15:44:13.631706Z","iopub.status.idle":"2025-10-23T15:44:14.304027Z","shell.execute_reply.started":"2025-10-23T15:44:13.631684Z","shell.execute_reply":"2025-10-23T15:44:14.303368Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"acc, auc = evaluate_full(model, val_loader, device)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-23T15:44:22.972177Z","iopub.execute_input":"2025-10-23T15:44:22.973058Z","iopub.status.idle":"2025-10-23T15:44:49.667944Z","shell.execute_reply.started":"2025-10-23T15:44:22.973034Z","shell.execute_reply":"2025-10-23T15:44:49.667163Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.537 | AUC: 0.537\n              precision    recall  f1-score   support\n\n         0.0      0.570     0.391     0.464       207\n         1.0      0.519     0.690     0.593       197\n\n    accuracy                          0.537       404\n   macro avg      0.545     0.541     0.528       404\nweighted avg      0.545     0.537     0.527       404\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":16}]}